import propositional;
import predicate;

############################
######## SET THEORY ########
############################

"집합론에서 정의하는 [$\in] 관계."
$!<prec=450>#1<<\in>>#2$
st in(cls x, cls y);

$\left(\cdot<<\in>>#1\right)$
pr is_in(cls y) {
	(cls x) => {in(x, y)}
}

$\left(#1<<\in>>\cdot\right)$
pr contains(cls x) {
	(cls y) => {in(x, y)}
}

"[$\notin]."
$!<prec=450>#1<<\notin>>#2$
st Nin(cls x, cls y) {
	N(in(x, y))
}

"[$\subseteq]."
$!<prec=350>#1<<\subseteq>>#2$
st subseteq(cls x, cls y) {
	U((cls z) => {
		I(
			in(z, x),
			in(z, y)
		)
	})
}

$!<prec=350>#1<<=>>#2$
st eq(cls x, cls y);

"[$\neq]."
$!<prec=350>#1<<\neq>>#2$
st Neq(cls x, cls y) {
	N(eq(x, y))
}

"동일자의 식별불가능성 원리(indiscernibility of identicals)."
axiomatic schema ax_indiscernible(pr f) {
	U2((cls x, cls y) => { I(eq(x, y), E(f(x), f(y))) })
}

schema ax_indiscernible_m(pr f, cls x: @11, cls y: @12) {
	eq(x, y) |-
		mp[@h1; Ue2(?, x, y)[ax_indiscernible(f)]]
}

schema ax_indiscernible_m1(pr f, cls x: @11, cls y: @12) {
	eq(x, y), f(x) |-
		mpE1[@h2; ax_indiscernible_m(f, ?, ?)[@h1]]
}

schema ax_indiscernible_m2(pr f, cls x: @11, cls y: @12) {
	eq(x, y), f(y) |-
		mpE2[@h2; ax_indiscernible_m(f, ?, ?)[@h1]]
}

schema ax_indiscernible2_m(pr2 f, cls x: @11, cls y: @21, cls u: @12, cls v: @22) {
	eq(x, u), eq(y, v) |-
		syllE[
			ax_indiscernible_m((cls a) => {
				f(a, y)
			}, ?, ?)[@h1];
			ax_indiscernible_m((cls b) => {
				f(u, b)
			}, ?, ?)[@h2]
		]
}

schema ax_indiscernible2_m1(pr2 f, cls x: @11, cls y: @21, cls u: @12, cls v: @22) {
	eq(x, u), eq(y, v), f(x, y) |-
		mpE1[@h3; ax_indiscernible2_m(f, ?, ?, ?, ?)[@h1; @h2]]
}

schema ax_indiscernible2_m2(pr2 f, cls x: @11, cls y: @21, cls u: @12, cls v: @22) {
	eq(x, u), eq(y, v), f(u, v) |-
		mpE2[@h3; ax_indiscernible2_m(f, ?, ?, ?, ?)[@h1; @h2]]
}

"eq의 이전 정의."
schema eq_def(cls x: @11, cls y: @12) {
	eq(x, y) |-
		Ai[
			Ui[(cls z) => { ax_indiscernible_m((cls x) => {in(z, x)}, ?, ?)[@h1] }];
			Ui[(cls w) => { ax_indiscernible_m((cls x) => {in(x, w)}, ?, ?)[@h1] }]
		]
}

"axiom of extensionality."
axiomatic schema ax_extensional() {
	U2((cls x, cls y) => {
		I(
			U((cls z) => {
				E(
					in(z, x),
					in(z, y)
				)
			}),
			eq(x, y)
		)
	})
}

schema eq_i(cls x, cls y) {
	U((cls z) => {E(in(z, x), in(z, y))}) |-
		mp[@h1; Ue2(?, x, y)[ax_extensional()]]
}

schema eq_Ae1(cls x: @11, cls y: @12) {
	eq(x, y) |- Ae1[eq_def[@h1]]
}

schema eq_Ae1_Ue(cls x, cls y, cls z) {
	eq(x, y) |- Ue(?, z)[eq_Ae1(x, y)[@h1]]
}

schema eq_Ae1_Ue_Ee1(cls x, cls y, cls z) {
	eq(x, y) |- Ee1[eq_Ae1_Ue(x, y, z)[@h1]]
}

schema eq_Ae1_Ue_Ee2(cls x, cls y, cls z) {
	eq(x, y) |- Ee2[eq_Ae1_Ue(x, y, z)[@h1]]
}

schema eq_Ae2(cls x: @11, cls y: @12) {
	eq(x, y) |- Ae2[eq_def[@h1]]
}

schema eq_Ae2_Ue(cls x, cls y, cls w) {
	eq(x, y) |- Ue(?, w)[eq_Ae2(x, y)[@h1]]
}

schema eq_Ae2_Ue_Ee1(cls x, cls y, cls w) {
	eq(x, y) |- Ee1[eq_Ae2_Ue(x, y, w)[@h1]]
}

schema eq_Ae2_Ue_Ee2(cls x, cls y, cls z) {
	eq(x, y) |- Ee2[eq_Ae2_Ue(x, y, z)[@h1]]
}

schema in_eq_left_1(cls x: @11, cls y: @22, cls z: @12) {
	in(x, z), eq(x, y) |-
		mp[
			@h1;
			eq_Ae2_Ue_Ee1(x, y, z)[
				@h2
			]
		]
}

schema in_eq_left_2(cls x: @21, cls y: @22, cls z: @12) {
	in(y, z), eq(x, y) |-
		mp[
			@h1;
			eq_Ae2_Ue_Ee2(x, y, z)[
				@h2
			]
		]
}

schema in_eq_right_1(cls x: @12, cls y: @22, cls z: @11) {
	in(z, x), eq(x, y) |-
		mp[
			@h1;
			eq_Ae1_Ue_Ee1(x, y, z)[
				@h2
			]
		]
}

schema in_eq_right_2(cls x: @21, cls y: @22, cls z: @11) {
	in(z, y), eq(x, y) |-
		mp[
			@h1;
			eq_Ae1_Ue_Ee2(x, y, z)[
				@h2
			]
		]
}

schema eq_reflexive(cls x) {
	eq_i(x, x)[
		Ui[(cls z) => {
			Epp(in(z, x))
		}]
	]
}

schema eq_symmetric(cls x: @11, cls y: @12) {
	eq(x, y) |-
		eq_i(y, x)[
			UE_flip(is_in(x), is_in(y))[Ae1[eq_def[@h1]]]
		]
}

schema Neq_symmetric(cls x: @11, cls y: @12) {
	Neq(x, y) |-
		Niu[eq(y, x) |- Fi[eq_symmetric[@h2]; @h1]]
		[as Neq(y, x)]
}

schema eq_transitive(cls x: @11, cls y: @12, cls z: @22) {
	eq(x, y), eq(y, z) |-
		eq_i(x, z)[
			syllUE(
				is_in(x), is_in(y), is_in(z)
			)[Ae1[eq_def[@h1]]; Ae1[eq_def[@h2]]]
		]
}

schema eq_transitive_El(cls x: @11, cls y: @12, cls z) {
	eq(x, y) |-
		Eiu[
			eq(z, x) |- eq_transitive[@h2; @h1];
			eq(z, y) |- eq_symmetric[eq_transitive[@h1; eq_symmetric[@h2]]]
		]
}

schema eq_transitive_Er(cls x: @11, cls y: @12, cls z) {
	eq(x, y) |-
		Ei[
			cp[eq(x, z) |- eq_transitive[eq_symmetric[@h1]; @h2]];
			cp[eq(y, z) |- eq_transitive[@h1; @h2]]
		]
}

schema eq_simple(cls x, cls y) {
	Eiu[
		eq_Ae1(x, y);
		eq_i(x, y)
	]
}

schema eq_to_subseteq_1(cls x: @11, cls y: @12) {
	eq(x, y) |-
		Ee1U(is_in(x), is_in(y))[mp[@h1; Ee1[eq_simple(x, y)]]]
		[as subseteq(x, y)]
}

schema eq_to_subseteq_2(cls x: @11, cls y: @12) {
	eq(x, y) |-
		eq_to_subseteq_1[eq_symmetric[@h1]]
}

schema subseteq_to_eq(cls x: @11, cls y: @12) {
	subseteq(x, y), subseteq(y, x) |-
		eq_i(x, y)[EiU(is_in(x), is_in(y))[@h1; @h2]]
}

schema subseteq_subseteq(cls x: @11, cls y: @12, cls z: @22) {
	subseteq(x, y), subseteq(y, z) |-
		syllU(is_in(x), is_in(y), is_in(z))[@h1; @h2]
		[as subseteq(x, z)]
}

schema eq_subseteq(cls x: @11, cls y: @12, cls z: @22) {
	eq(x, y), subseteq(y, z) |-
		subseteq_subseteq[eq_to_subseteq_1[@h1]; @h2]
}

schema subseteq_eq(cls x, cls y, cls z) {
	subseteq(x, y), eq(y, z) |-
		subseteq_subseteq[@h1; eq_to_subseteq_1[@h2]]
}

schema call_eq_i(fun f, cls x: @11, cls y: @12) {
	eq(x, y) |-
		ax_indiscernible_m1(
			(cls y) => {eq(f(x), f(y))}, x, y
		)[@h1; eq_reflexive(f(x))]
}

"어떤 class 내에서의 forall."
$!<prec=249><<\forall>>_{\in #1}#2$
st Uin(cls a, pr f) {
	U((cls z) => {
		I(
			in(z, a),
			f(z)
		)
	})
}

schema UinA_i(pr f: @12, pr g: @22, cls x: @11) {
	Uin(x, f), Uin(x, g) |-
		Ui[(cls z) => { cp[in(z, x) |-
			Ai[mp[@h3; Ue(?, z)[@h1]]; mp[@h3; Ue(?, z)[@h2]]]]
		}][as Uin(x, Af(f, g))]
}

schema Uin_subset(cls a: @12, cls b: @11, pr f: @22) {
	subseteq(a, b), Uin(b, f) |-
		syllU(is_in(a), is_in(b), f)[@h1; @h2]
		[as Uin(a, f)]
}

schema UUin_to_UinU(cls a, pr2 f) {
	U((cls z) => {
		Uin(a, (cls w) => {f(z, w)})
	}) |-
		Ui[(cls w) => { cp[in(w, a) |-
			Ui[(cls z) => {
				mp[@h2; Ue(?, w)[Ue(?, z)[@h1]]]
			}]] }]
		[as Uin(a, (cls w) => {
			U((cls z) => {f(z, w)})
		})]
}

"어떤 class 내에서의 exists. Uin과 달리 and로 연결된다."
$!<prec=249><<\exists>>_{\in #1}#2$
st Xin(cls a, pr f) {
	X((cls z) => {
		A(
			in(z, a),
			f(z)
		)
	})
}

schema Xin_eq($A$ cls a: @11, $B$ cls b: @12, pr f) {
	eq(a, b) |-
		$foo = Ui[(cls z) => { EAi[
			eq_Ae1_Ue(a, b, z)[@h1];
			Epp(f(z))
		] }];
		
		$c1 = Xin(a, f) |-
			mpXE1(
				(cls z) => {A(in(z, a), f(z))},
				(cls z) => {A(in(z, b), f(z))}
			)[@h2; $foo]
			[as Xin(b, f)];
		
		$c2 = Xin(b, f) |-
			mpXE2(
				(cls z) => {A(in(z, a), f(z))},
				(cls z) => {A(in(z, b), f(z))}
			)[@h2; $foo]
			[as Xin(a, f)];
			
		Eiu[$c1; $c2]
}

"Xin을 위한 mp."
schema mpXin($A$ cls a: @11, pr f: @12, pr g: @222) {
	Xin(a, f), Uin(a, If(f, g)) |-
		mpX(Af(is_in(a), f), Af(is_in(a), g))[
			@h1;
			Ui[(cls z) => { cp[A(in(z, a), f(z)) |-
				Ai[Ae1[@h3]; mp(f(z), g(z))[Ae2[@h3]; mp[Ae1[@h3]; Ue(?, z)[@h2]]]]
			] }]
		][as Xin(a, g)]
}

schema mpXin_Xe_p($A$ cls a: @11, pr f: @12, st p) {
	Xin(a, f), Uin(a, If(f, (cls z) => { p })) |-
		Xe_p(p)[XAe2(is_in(a), (cls z) => { p })[mpXin[@h1; @h2]]]
}

"어떤 class가 집합이라는 것. 어떤 class의 원소면 된다. 독일어 [*Menge] (집합)의 M이다."
$\left(<<\operatorname{\mathfrak M}>> #1\right)$
st set(cls x) {
	X((cls y) => {
		in(x, y)
	})
}

"set을 도입한다."
schema set_i(cls x: @11, cls y: @12) {
	in(x, y) |-
		Xi(contains(x), y)[@h1]
		[as set(x)]
}

schema set_i_A(cls x, cls y, cls z) {
	A(in(z, x), in(z, y)) |-
		set_i[Ae1[@h1]]
}

schema set_i_O(cls x, cls y, cls z) {
	O(in(z, x), in(z, y)) |-
		Oe[
			@h1;
			cp[set_i(z, x)];
			cp[set_i(z, y)]
		]
}

schema in_subseteq(cls x: @12, cls y: @22, cls z: @11) {
	in(z, x), subseteq(x, y) |-
		mp[
			@h1;
			Ue(?, z)[@h2]
		]
}

schema self_subseteq_self(cls x) {
	Ui[(cls z) => {
		cp[in(z, x) |- @h1]
	}][as subseteq(x, x)]
}

"[$f]를 만족하는 것들이 서로 같다."
$!<prec=249><<\exists_{\leq 1}>>#1$
st Q(pr f) {
	U2((cls x, cls y) => {
		I(
			A(f(x), f(y)),
			eq(x, y)
		)
	})
}

schema Qi(pr f) {
	X((cls c) => {
		U((cls x) => {
			I(f(x), eq(x, c))
		})
	}) |-
		Ui2[(cls x, cls y) => { cp2[
			f(x), f(y) |-
				mpX_Xe_p(?, eq(x, y))[
					@h1;
					Ui[(cls c) => { cp[
						U((cls x) => {
							I(f(x), eq(x, c))
						}) |-
							eq_transitive[
								mp[@h2; Ue(?, x)[@h4]];
								eq_symmetric[mp[@h3; Ue(?, y)[@h4]]]
							]
					] }]
				]
		] }][as Q(f)]
}

schema Qe(pr f: @11, cls x, cls y) {
	Q(f), f(x), f(y) |-
		mp[Ai[@h2; @h3]; Ue2(?, x, y)[@h1]]
}

schema Qim(pr f, cls c) {
	U((cls x) => {
		I(f(x), eq(x, c))
	}) |-
		Qi(f)[Xi((cls c) => {
			U((cls x) => {
				I(f(x), eq(x, c))
			})
		}, c)[@h1]]
}

"유일 존재 양화(unique existential quantification)."
$!<prec=249><<\exists!>>#1$
st Xq(pr f) {
	A(X(f), Q(f))
}

schema XQ_to_Xq(pr f: @11) {
	X(f), Q(f) |- Ai[@h1; @h2][as Xq(f)]
}

schema set_is_set_1(cls x: @11, cls y: @22) {
	set(x), eq(x, y) |-
		mpXE1(contains(x), contains(y))[@h1; eq_Ae2[@h2]]
		[as set(y)]
}

schema set_is_set_2(cls x: @11, cls y: @21) {
	set(x), eq(y, x) |-
		set_is_set_1[@h1; eq_symmetric[@h2]]
}

"술어를 만족하는 set들의 class를 만든다. 일반적으로는 [$\{z: f(z)\}]라고 쓰는 것이다."
$\left\{<<:>>#1\right\}$
cls setbuilder(pr f);

"setbuilder의 defining property. f를 만족하는 임의의 [**집합]의 class를 만들게 해 준다. `[Pinter]`에서는 axiom of class construction이라 부르는 것 같다."
axiomatic schema setbuilder_def(pr f) {
	U((cls w) => {
		E(
			in(w, setbuilder(f)),
			A(set(w), f(w))
		)
	})
}

schema setbuilder_def_Ue(pr f, cls z) {
	Ue((cls w) => {
		E(in(w, setbuilder(f)), A(set(w), f(w)))
	}, z)[setbuilder_def(f)]
}

"setbuilder를 소거한다."
schema setbuilder_e(pr f: @121, cls z: @11) {
	in(z, setbuilder(f)) |-
		Ae2[mp[
			@h1;
			Ee1[setbuilder_def_Ue(f, z)]
		]]
}

schema setbuilder_ec(pr f, cls z) {
	cp[setbuilder_e(f, z)]
}

"setbuilder를 도입한다."
schema setbuilder_i(pr f: @r21, cls z: @11) {
	set(z), f(z) |-
		mp[
			Ai[@h1; @h2];
			Ee2[setbuilder_def_Ue(f, z)]
		]
}

schema setbuilder_subseteq_i(pr f: @111, pr g: @112) {
	U(If(f, g)) |-
		Ui[(cls z) => { cp[in(z, setbuilder(f)) |- setbuilder_i(g, z)[
			set_i[@h2];
			mp[setbuilder_e[@h2]; Ue(?, z)[@h1][as I(f(z), g(z))]]
		]] }]
		[as subseteq(setbuilder(f), setbuilder(g))]
}

schema setbuilder_subseteq_e(pr f: @211, pr g: @221, cls z: @11) {
	set(z), subseteq(setbuilder(f), setbuilder(g)) |-
		cp[f(z) |-
			setbuilder_e[in_subseteq[setbuilder_i(f, z)[@h1; @h3]; @h2]]]
}

schema setbuilder_eq_i(pr f: @111, pr g: @112) {
	U(Ef(f, g)) |-
		eq_i(setbuilder(f), setbuilder(g))[
			EiU(is_in(setbuilder(f)), is_in(setbuilder(g)))[
				setbuilder_subseteq_i[Ee1U[@h1]]; setbuilder_subseteq_i[Ee2U[@h1]]
			]
		]
}

schema setbuilder_eq_e(pr f: @211, pr g: @221, cls z: @11) {
	set(z), eq(setbuilder(f), setbuilder(g)) |-
		Ei[
			setbuilder_subseteq_e[@h1; eq_to_subseteq_1[@h2]];
			setbuilder_subseteq_e[@h1; eq_to_subseteq_2[@h2]]
		]
}

schema setbuilder_ia(pr f, cls z: @111) {
	A(set(z), f(z)) |-
		mp[
			@h1;
			Ee2[setbuilder_def_Ue(f, z)]
		]
}

schema setbuilder_def_set(pr f, cls x: @111) {
	I(f(x), set(x)) |-
		Ei[
			cp[
				in(x, setbuilder(f)) |-
					Ae2[mp[
						@h2;
						Ee1[Ue(?, x)[setbuilder_def(f)]]
					]]
			];
			cp[
				f(x) |-
					mp[
						Ai[
							mp[@h2; @h1];
							@h2
						];
						Ee2[Ue(?, x)[setbuilder_def(f)]]
					]
			]
		]
}

schema setbuilder_def_set_2(pr f, cls x) {
	set(x) |- setbuilder_def_set(f, x)[
		weaken(?, f(x))[@h1]
	]
}

schema setbuilder_is_setbuilder(pr f: @121, cls x: @11) {
	eq(x, setbuilder(f)) |-
		syllUE(
			is_in(x),
			is_in(setbuilder(f)),
			(cls z) => {A(set(z), f(z))}
		)[eq_Ae1[@h1]; setbuilder_def(f)]
		[as U((cls z) => {
			E(in(z, x), A(set(z), f(z)))
		})]
}

"술어를 만족하는 집합 [$z]에 대해 [$f(z)]를 포함하는 클래스를 만든다. 일반적으로 [$\{f(z): g(z)\}]라고 쓰는 것이다."
$\left\{#1<<:>>#2\right\}$
cls setbuilder2(fun f, pr g) {
	setbuilder((cls w) => {
		X((cls z) => {
			A(
				eq(w, f(z)),
				g(z)
			)
		})
	})
}

schema setbuilder2_i(fun f: @r21, pr g: @r22, cls z) {
	set(f(z)), g(z) |-
		setbuilder_i[
			@h1;
			Xi(($z'$ cls zz) => {
				A(eq(f(z), f(zz)), g(zz))
			}, z)[Ai[eq_reflexive(f(z)); @h2]]
		][as in(f(z), setbuilder2(f, g))]
}

"술어와 집합으로부터 술어를 만족하는 집합의 부분집합을 만든다.
일반적으로는 [$\{z \in x: f(z)\}]라고 쓰는 것이다."
$\left\{\in #1<<:>>#2\right\}$
cls subsetbuilder(cls x, pr f) {
	setbuilder((cls y) => {
		A(
			in(y, x),
			f(y)
		)
	})
}

schema subsetbuilder_i(cls x: @12, pr f, cls z: @11) {
	in(z, x), f(z) |-
		setbuilder_i[
			set_i[@h1];
			Ai[@h1; @h2]
		][as in(z, subsetbuilder(x, f))]
}

schema subsetbuilder_e(cls x: @121, pr f: @122, cls z: @11) {
	in(z, subsetbuilder(x, f)) |-
		Ae2[setbuilder_e[@h1]]
}

schema subsetbuilder_is_subset(cls x, pr f) {
	Ui[(cls z) => { cp[in(z, subsetbuilder(x, f)) |-
		Ae1[setbuilder_e[@h1]]] }]
	[as subseteq(subsetbuilder(x, f), x)]
}

"axiom schema of specification. 어떤 집합에서 임의 술어를 만족시키는 원소들의 class를 만들었을 때 이 class가 집합이라는 뜻이다."
axiomatic schema ax_specify(pr f) {
	U((cls x) => {
		I(
			set(x),
			set(subsetbuilder(x, f))
		)
	})
}

schema ax_specify_m(pr f, cls x: @11) {
	set(x) |- mp[@h1; Ue(?, x)[ax_specify(f)]]
}

"descriptor operator. [$f]를 만족하는 클래스가 존재하고 유일하다면 그 클래스이며 아니면 [$V]이다.

즉 Principia Mathematica의 inverted iota 연산자 같은 것이다. Metamath의 [~(href=http://us.metamath.org/mpeuni/df-iota.html)df-iota]를 참조하였으나 꽤 다르게 정의되었다."
$\left(<<\operatorname{the}>>#1\right)$
sealed cls instantiate(pr f) {
	setbuilder((cls z) => {
		I(
			Xq(f),
			X((cls x) => {
				A(f(x), in(z, x))
			})
		)
	})
}

schema instantiate_eq_i(pr f: @11, cls x) using instantiate {
	Q(f), f(x) |-
		$foo = Ui[(cls z) => {
			$c1 = cp[in(z, x) |-
				setbuilder_i[
					set_i[@h3];
					weaken(?, Xq(f))[Xi((cls x) => {
						A(f(x), in(z, x))
					}, x)[Ai[@h2; @h3]]]
				][as in(z, instantiate(f))]];

			$c2 = cp[in(z, instantiate(f)) |-
				mpX_Xe_p(?, in(z, x))[
					mp[Ai[Xi(f, x)[@h2]; @h1]; setbuilder_e[@h3]];
					Ui[(cls y) => { cp2[f(y), in(z, y) |-
						in_eq_right_2[@h5; Qe(f, x, y)[@h1; @h2; @h4]]] }]
				]];

			Ei[$c1; $c2]
		}];
		
		eq_i(x, instantiate(f))[$foo]
}

schema instantiate_def(pr f: @11) {
	Xq(f) |-
		mpX_Xe_p(?, f(instantiate(f)))[
			Ae1[@h1];
			Ui[(cls x) => { cp[f(x) |-
				ax_indiscernible_m1(f, ?, ?)[instantiate_eq_i(f, x)[Ae2[@h1]; @h2]; @h2]
			] }]
		]
}

"교집합."
$!<prec=300>#1<<\cap>>#2$
cls cap(cls x, cls y) {
	setbuilder((cls z) => {
		A(in(z, x), in(z, y))
	})
}

schema set_i_A_c(cls x, cls y, cls z) {
	cp[set_i_A(x, y, z)]
}

schema cap_def(cls x, cls y, cls z) {
	setbuilder_def_set((cls z) => {
		A(in(z, x), in(z, y))
	}, z)[set_i_A_c(x, y, z)]
	[as E(in(z, cap(x, y)), A(in(z, x), in(z, y)))]
}

schema cap_i(cls x: @112, cls y: @122, cls z: @111) {
	A(in(z, x), in(z, y)) |-
		mp[@h1; Ee2[cap_def(x, y, z)]]
}

schema cap_e(cls x: @121, cls y: @122, cls z: @11) {
	in(z, cap(x, y)) |-
		mp[@h1; Ee1[cap_def(x, y, z)]]
}

schema cap_def_vi(cls x, cls y) {
	Ui[(cls z) => { cap_def(x, y, z) }]
}

schema cap_commutative_0(cls x: @121, cls y: @122, cls z: @11) {
	in(z, cap(x, y)) |-
		cap_i[A_flip[cap_e[@h1]]]
}

schema cap_commutative_1(cls x, cls y, cls z) {
	Eiu[cap_commutative_0(x, y, z); cap_commutative_0(y, x, z)]
}

schema cap_commutative_2(cls x, cls y) {
	eq_i(
		cap(x, y),
		cap(y, x)
	)[Ui((cls z) => {
		E(in(z, cap(x, y)), in(z, cap(y, x)))
	})[(cls z) => { cap_commutative_1(x, y, z) }]]
}

"합집합."
$!<prec=300>#1<<\cup>>#2$
cls cup(cls x, cls y) {
	setbuilder((cls z) => {
		O(in(z, x), in(z, y))
	})
}

schema cup_i1(cls x: @12, cls y, cls z: @11) {
	in(z, x) |-
		setbuilder_i[
			set_i[@h1];
			Oi1(?, in(z, y))[@h1]
		][as in(z, cup(x, y))]
}

schema cup_i2(cls x, cls y: @12, cls z: @11) {
	in(z, y) |-
		setbuilder_i[
			set_i[@h1];
			Oi2(in(z, x), ?)[@h1]
		][as in(z, cup(x, y))]
}

"합집합을 도입한다."
schema cup_i(cls x: @112, cls y: @122, cls z: @111) {
	O(in(z, x), in(z, y)) |-
		Oe[
			@h1;
			cp[cup_i1(x, y, z)];
			cp[cup_i2(x, y, z)]
		]
}

schema cup_e(cls x: @121, cls y: @122, cls z: @11) {
	in(z, cup(x, y)) |-
		setbuilder_e[@h1]
}

schema cup_is_bigger_1(cls x, cls y) {
	Ui[(cls z) => {cp[in(z, x) |- cup_i[Oi1(?, in(z, y))[@h1]]]}]
	[as subseteq(x, cup(x, y))]
}

schema cup_is_bigger_2(cls x, cls y) {
	Ui[(cls z) => {cp[in(z, y) |- cup_i[Oi2(in(z, x), ?)[@h1]]]}]
	[as subseteq(y, cup(x, y))]
}

schema cup_eq_i(cls x: @11, cls y: @12, cls u: @21, cls v: @22) {
	$foo = (cls x, cls y, cls u, cls v, cls z) => {
		eq(x, y), eq(u, v) |-
			cp[in(z, cup(x, u)) |-
				setbuilder_i[
					set_i[@h3];
					Oeu[
						setbuilder_e[@h3];
						in(z, x) |- Oi1(?, in(z, v))[in_eq_right_1[@h4; @h1]];
						in(z, u) |- Oi2(in(z, y), ?)[in_eq_right_1[@h4; @h2]]
					]
				][as in(z, cup(y, v))]]
	};
	
	eq(x, y), eq(u, v) |-
		eq_i(cup(x, u), cup(y, v))[Ui[(cls z) => {
			Ei[$foo(x, y, u, v, z)[@h1; @h2]; $foo(y, x, v, u, z)[eq_symmetric[@h1]; eq_symmetric[@h2]]]
		}]]
}

"일반화된 교집합."
$<<\bigcap>>#1$
cls bigcap($A$ cls a) {
	setbuilder((cls z) => {
		Uin(a, (cls x) => {
			in(z, x)
		})
	})
}

"일반화된 합집합."
$<<\bigcup>>#1$
cls bigcup($A$ cls a) {
	setbuilder((cls z) => {
		Xin(a, (cls x) => {
			in(z, x)
		})
	})
}

schema bigcap_i($A$ cls a, cls z) {
	set(z), Uin(a, (cls x) => {
		in(z, x)
	}) |-
		setbuilder_i[@h1; @h2]
		[as in(z, bigcap(a))]
}

schema bigcap_e($A$ cls a, cls z) {
	in(z, bigcap(a)) |-
		setbuilder_e((cls z) => {
			Uin(a, (cls x) => {
				in(z, x)
			})
		}, z)[@h1]
}

schema bigcup_i($A$ cls a: @12, cls x: @11, cls z: @21) {
	in(x, a), in(z, x) |-
		setbuilder_i[
			set_i[@h2];
			Xi((cls w) => {
				A(in(w, a), in(z, w))
			}, x)[Ai[@h1; @h2]]
		][as in(z, bigcup(a))]
}

schema bigcup_eq_i($A$ cls a: @11, $B$ cls b: @12) {
	eq(a, b) |-
		setbuilder_eq_i(
			(cls z) => {Xin(a, contains(z))},
			(cls z) => {Xin(b, contains(z))}
		)[
			Ui[(cls z) => { Xin_eq(?, ?, contains(z))[@h1] }]
		][as eq(bigcup(a), bigcup(b))]
}

schema bigcap_is_smaller($A$ cls a: @12, cls x: @11) {
	in(x, a) |-
		Ui[(cls z) => {
			cp[
				in(z, bigcap(a)) |-
					mp[
						@h1;
						Ue(?, x)[bigcap_e(a, z)[@h2]]
					]
			]
		}][as subseteq(bigcap(a), x)]
}

schema cap_is_set_1(cls x, cls y) {
	set(x) |- ax_specify_m(is_in(y), ?)[@h1][as set(cap(x, y))]
}

schema cap_is_set_2(cls x, cls y) {
	set(y) |- set_is_set_1[
		cap_is_set_1(y, x)[@h1];
		cap_commutative_2(y, x)
	]
}

"axiom of union."
axiomatic schema ax_bigcup() {
	U(($A$ cls a) => {
		I(set(a), set(bigcup(a)))
	})
}

schema ax_bigcup_m($A$ cls a) {
	set(a) |-
		mp[
			@h1;
			Ue(?, a)[ax_bigcup()]
		]
}

schema subset_cap_is_subset(cls x: @11, cls y: @12) {
	subseteq(x, y) |-
		eq_i(x, cap(x, y))[
			Ui[(cls z) => {
				syllE[
					DIpqEpApq[Ue(?, z)[@h1]];
					E_flip[cap_def(x, y, z)]
				]
			}]
		]
}

schema subset_is_set(cls x: @21, cls y: @22) {
	set(y), subseteq(x, y) |-
		set_is_set_2[cap_is_set_2(x, y)[@h1]; subset_cap_is_subset[@h2]]
}

schema supset_is_not_set(cls x: @111, cls y: @22) {
	N(set(x)), subseteq(x, y) |-
		Niu[set(y) |- Fi[subset_is_set[@h3; @h2]; @h1]]
}

"차집합."
$!<prec=300>#1<<\setminus>>#2$
cls setminus(cls x, cls y) {
	setbuilder((cls z) => {
		A(in(z, x), Nin(z, y))
	})
}

schema setminus_i(cls x: @12, cls y: @212, cls z: @11) {
	in(z, x), N(in(z, y)) |-
		setbuilder_i[
			set_i[@h1];
			Ai[@h1; @h2]
		][as in(z, setminus(x, y))]
}

schema setminus_is_smaller(cls x, cls y) {
	Ui[(cls z) => { cp[in(z, setminus(x, y)) |- Ae1[setbuilder_e[@h1]]] }]
	[as subseteq(setminus(x, y), x)]
}

schema setminus_e2(cls x: @121, cls y: @122, cls z: @11) {
	in(z, setminus(x, y)) |-
		Ae2[setbuilder_e[@h1]]
}

"공집합."
$<<\varnothing>>$
cls emptyset() {
	setbuilder((cls z) => { F() })
}

"axiom of empty set."
axiomatic schema ax_emptyset() {
	set(emptyset())
}

"emptyset의 defining property."
schema emptyset_def(cls z) {
	Niu[in(z, emptyset()) |-
		setbuilder_e[@h1]]
	[as Nin(z, emptyset())]
}

"universal class."
$<<V>>$
cls universe() {
	setbuilder((cls z) => { T })
}

schema universe_in_i(cls x: @11) {
	set(x) |-
		setbuilder_i[@h1; Ti()]
		[as in(x, universe())]
}

schema universe_subseteq_i($X$ cls x) {
	Ui[(cls z) => {cp[in(z, x) |- universe_in_i[set_i[@h1]]]}]
	[as subseteq(x, universe())]
}

schema cup_universe_is_universe($X$ cls x) {
	subseteq_to_eq[
		Ui[(cls z) => {cp[in(z, cup(x, universe())) |-
			universe_in_i[set_i[@h1]]]}]
		[as subseteq(cup(x, universe()), universe())];
		cup_is_bigger_2(x, universe())
	]
}

schema universe_cup_is_universe($X$ cls x) {
	subseteq_to_eq[
		Ui[(cls z) => {cp[in(z, cup(universe(), x)) |-
			universe_in_i[set_i[@h1]]]}]
		[as subseteq(cup(universe(), x), universe())];
		cup_is_bigger_1(universe(), x)
	]
}

"러셀 집합. 사실 집합이 아니라 proper class이다."
cls russell_set() {
	setbuilder((cls z) => {
		Nin(z, z)
	})
}

"러셀 집합은 집합이 아니다."
schema russell_set_is_not_set() {
	Niu[set(russell_set()) |-
		$russell_in_russell = NNe[Niu[Nin(russell_set(), russell_set()) |-
			Fi[
				setbuilder_i[
					@h1;
					@h2
				][as in(russell_set(), russell_set())];
				@h2
			]]];

		Fi[$russell_in_russell; setbuilder_e[$russell_in_russell]]
	]
}

"전체집합은 집합이 아니다."
schema universe_is_not_set() {
	supset_is_not_set[russell_set_is_not_set(); universe_subseteq_i(russell_set())]
}

"싱글턴 클래스. [$x]가 집합일 때는 일반적인 정의와 같이 [$x]만을 원소로 갖는 클래스를 만들고, [$x]가 고유 클래스(proper class)일 경우는 전체집합 [$V]가 된다.

클래스 개념이 있는 집합론에서 고유 클래스는 정의에 의해 어떤 클래스의 원소가 될 수 없으므로 고유 클래스로는 싱글턴 클래스를 만들 수 없다. 그러나 우리의 체계에서는 고유 클래스에 대해서도 singleton을 호출할 수 있다. 그러나 만들어지는 클래스는 원소의 개수가 1이 아니게 되므로 싱글턴이 되지는 않는다.

만약 [$\{x\} = \{z: z=x\}]로 정의한다면 [$x]가 고유 클래스일 때 [$\{x\}]가 조용히 공집합이 되는데, 이는 공집합 공리에 의해 집합이 된다. 그러므로 순서쌍이 Kuratowski의 정의에 따라 [$.(x, y) = \{\{x\}, \{x, y\}\}]와 같이 정의될 때, 이주 지저분한 이유에 의해서 [$.(x, y)\in A\times B]이어도 [$y\in B]임을 유도할 수 없는 등의 문제가 있었다. 이때 [$\{x, y\} = \{x\}\cup\{y\}]이다.

그러므로 조용히 공집합이 되는 것보다 마치 에러를 던지듯 [$V]가 되는 것이 낫다고 판단하였다. 이는 [~http://www.qedeq.org/current/doc/math/qedeq_set_theory_v1_en.pdf]의 Definition 11과 같은 방식의 정의이다. 집합에 대해서만 잘 정의되는 개념을 고유 클래스에 적용하면 고유 클래스가 만들어지는 패턴을 일반적으로 적용하면 될 듯하다.

이 정의가 도입되는 과정은 [~(href=https://github.com/logico-philosophical/math-o-matic/issues/8)이슈 #8]에 기록되어 있다.

@sealed [$x]가 집합이 아닐 때 이상하게 되어 봉인되었다."
$\left\{#1\right\}{}^{<<\scriptscriptstyle\dag>>}$
sealed cls singleton(cls x) {
	setbuilder((cls z) => {
		O(N(set(x)), eq(z, x))
	})
}

schema self_in_singleton(cls x: @11) using singleton {
	set(x) |-
		setbuilder_i[
			@h1;
			Oi2(N(set(x)), ?)[eq_reflexive(x)]
		][as in(x, singleton(x))]
}

schema singleton_e(cls x: @11, cls z: @21) using singleton {
	set(x), in(z, singleton(x)) |-
		Oe1[setbuilder_e[@h2]; NNi[@h1]]
}

schema singleton_set_e(cls x: @111) using singleton {
	set(singleton(x)) |-
		NNe[Niu[N(set(x)) |-
			Fi[
				@h1;
				supset_is_not_set[
					universe_is_not_set();
					Ui[(cls z) => cp[in(z, universe()) |-
						setbuilder_i[
							set_i[@h3];
							Oi1(?, eq(z, x))[@h2]
						][as in(z, singleton(x))]
					]][as subseteq(universe(), singleton(x))]
				]
			]
		]]
}

st is_singleton(cls x) {
	Xq(is_in(x))
}

schema singleton_Q(cls x: @11) {
	set(x) |-
		Ui2[($z_1$ cls z1, $z_2$ cls z2) => {
			cp2[in(z1, singleton(x)), in(z2, singleton(x)) |-
				eq_transitive[
					singleton_e[@h1; @h2];
					eq_symmetric[singleton_e[@h1; @h3]]
				]]
		}][as Q(is_in(singleton(x)))]
}

schema singleton_is_singleton(cls x) {
	set(x) |-
		Ai[Xi(is_in(singleton(x)), x)[self_in_singleton[@h1]]; singleton_Q(x)[@h1]]
		[as is_singleton(singleton(x))]
}

schema singleton_eq_i(cls x: @11, cls y: @12) {
	eq(x, y) |- call_eq_i((cls z) => singleton(z), ?, ?)[@h1]
}

schema singleton_eq_e(cls x: @11, cls y: @21) {
	set(x), set(y), eq(singleton(x), singleton(y)) |-
		singleton_e[@h2; in_eq_right_1[self_in_singleton[@h1]; @h3]]
}

"더블턴 클래스. singleton의 정의에 의존한다."
$\left\{#1<<,>> #2\right\}$
cls doubleton(cls x, cls y) {
	cup(singleton(x), singleton(y))
}

schema doubleton_e(cls x: @11, cls y: @21, cls z: @31) {
	set(x), set(y), in(z, doubleton(x, y)) |-
		OI[
			setbuilder_e[@h3];
			cp[in(z, singleton(x)) |- singleton_e[@h1; @h4]];
			cp[in(z, singleton(y)) |- singleton_e[@h2; @h4]]
		]
}

"set(y) 조건을 완화할 수도 있으나, 그러면 y가 집합이 아닐 때의 doubleton의 정의에 너무 의존하게 되므로 그러지 않았다."
schema doubleton_in_1(cls x, cls y) {
	set(x), set(y) |-
		cup_i1(?, singleton(y), ?)[self_in_singleton(x)[@h1]]
		[as in(x, doubleton(x, y))]
}

"set(x) 조건을 완화할 수도 있으나, 그러면 x가 집합이 아닐 때의 doubleton의 정의에 너무 의존하게 되므로 그러지 않았다."
schema doubleton_in_2(cls x, cls y) {
	set(x), set(y) |-
		cup_i2(singleton(x), ?, ?)[self_in_singleton(y)[@h2]]
		[as in(y, doubleton(x, y))]
}

schema doubleton_eq_i(cls x: @11, cls y: @21, cls u: @12, cls v: @22) {
	eq(x, u), eq(y, v) |-
		cup_eq_i[singleton_eq_i[@h1]; singleton_eq_i[@h2]]
		[as eq(doubleton(x, y), doubleton(u, v))]
}

schema doubleton_set_e1(cls x: @111, cls y: @112) {
	set(doubleton(x, y)) |-
		singleton_set_e[
			subset_is_set[@h1; cup_is_bigger_1(singleton(x), singleton(y))]
		]
}

schema doubleton_set_e2(cls x: @111, cls y: @112) {
	set(doubleton(x, y)) |-
		singleton_set_e[
			subset_is_set[@h1; cup_is_bigger_2(singleton(x), singleton(y))]
		]
}

schema doubleton_set_e(cls x: @111, cls y: @112) {
	set(doubleton(x, y)) |-
		Ai[doubleton_set_e1[@h1]; doubleton_set_e2[@h1]]
}

schema doubleton_eq_e1(cls x: @11, cls y: @21, cls u: @31, cls v: @41) {
	set(x), set(y), set(u), set(v), eq(doubleton(x, y), doubleton(u, v)) |-
		doubleton_e[
			@h3; @h4;
			in_eq_right_1(doubleton(x, y), doubleton(u, v), x)[
				doubleton_in_1(x, y)[@h1; @h2];
				@h5
			]
		]
}

schema doubleton_eq_e2(cls x: @11, cls y: @21, cls u: @31, cls v: @41) {
	set(x), set(y), set(u), set(v), eq(doubleton(x, y), doubleton(u, v)) |-
		doubleton_e[
			@h3; @h4;
			in_eq_right_1(doubleton(x, y), doubleton(u, v), y)[
				doubleton_in_2(x, y)[@h1; @h2];
				@h5
			]
		]
}

schema doubleton_eq_e3_flip(cls x: @11, cls y: @21, cls u: @31, cls v: @41) {
	set(x), set(y), set(u), set(v), eq(doubleton(x, y), doubleton(u, v)) |-
		doubleton_eq_e1[@h3; @h4; @h1; @h2; eq_symmetric[@h5]]
}

schema doubleton_eq_e3(cls x: @11, cls y: @21, cls u: @31, cls v: @41) {
	set(x), set(y), set(u), set(v), eq(doubleton(x, y), doubleton(u, v)) |-
		OI[
			doubleton_eq_e3_flip[@h1; @h2; @h3; @h4; @h5];
			cp[eq_symmetric(u, x)];
			cp[eq_symmetric(u, y)]
		]
}

schema doubleton_eq_e4_flip(cls x: @11, cls y: @21, cls u: @31, cls v: @41) {
	set(x), set(y), set(u), set(v), eq(doubleton(x, y), doubleton(u, v)) |-
		doubleton_eq_e2[@h3; @h4; @h1; @h2; eq_symmetric[@h5]]
}

schema doubleton_eq_e4(cls x: @11, cls y: @21, cls u: @31, cls v: @41) {
	set(x), set(y), set(u), set(v), eq(doubleton(x, y), doubleton(u, v)) |-
		OI[
			doubleton_eq_e4_flip[@h1; @h2; @h3; @h4; @h5];
			cp[eq_symmetric(v, x)];
			cp[eq_symmetric(v, y)]
		]
}

"`[Pinter]` 정리 1.27."
schema doubleton_eq_e(cls x: @11, cls y: @21, cls u: @31, cls v: @41) {
	set(x), set(y), set(u), set(v), eq(doubleton(x, y), doubleton(u, v)) |-
		O1Ai[
			O2Ai[
				doubleton_eq_e1[@h1; @h2; @h3; @h4; @h5];
				doubleton_eq_e3[@h1; @h2; @h3; @h4; @h5]
			];
			O_flip[O1Ai[
				doubleton_eq_e4[@h1; @h2; @h3; @h4; @h5];
				doubleton_eq_e2[@h1; @h2; @h3; @h4; @h5]
			]]
		]
}

"axiom of pairing. doubleton의 정의가 이상해졌으므로 doubleton에 의존하지 않도록 바꾸는 것이 좋을 것이다."
axiomatic schema ax_doubleton() {
	U2((cls x, cls y) => {
		I(
			A(set(x), set(y)),
			set(doubleton(x, y))
		)
	})
}

schema doubleton_set_i(cls x: @11, cls y: @21) {
	set(x), set(y) |-
		mp[
			Ai[@h1; @h2];
			Ue2(?, x, y)[ax_doubleton()]
		]
}

schema doubleton_to_cup(cls x: @11, cls y: @21, cls z: @31, cls w: @41) {
	set(x), set(y), in(z, doubleton(x, y)), in(w, z) |-
		Oe[
			doubleton_e[@h1; @h2; @h3];
			cp[eq(z, x) |- cup_i1(?, y, ?)[in_eq_right_1[
				@h4; @h5
			]]];
			cp[eq(z, y) |- cup_i2(x, ?, ?)[in_eq_right_1[
				@h4; @h5
			]]]
		]
}

schema bigcup_singleton_to_element($A$ cls a: @11, cls x: @21, cls z: @31) {
	is_singleton(a), in(x, a), in(z, bigcup(a)) |-
		mpX_Xe_p(?, in(z, x))[
			setbuilder_e[@h3];
			Ui[(cls w) => { cp[A(in(w, a), in(z, w)) |-
				in_eq_right_2[Ae2[@h4]; mp[Ai[@h2; Ae1[@h4]]; Ue2(?, x, w)[Ae2[@h1]]]]] }]
		]
}

schema bigcup_singleton_is_element($A$ cls a: @11, cls x: @21) {
	is_singleton(a), in(x, a) |-
		eq_i(bigcup(a), x)[Ui[(cls z) => { Ei[
			cp[in(z, bigcup(a)) |- bigcup_singleton_to_element[@h1; @h2; @h3]];
			cp[in(z, x) |- bigcup_i[@h2; @h3]]
		] }]]
}

schema bigcup_singleton_to_self(cls x: @11, cls z: @21) {
	set(x), in(z, bigcup(singleton(x))) |-
		mpX_Xe_p(?, in(z, x))[
			setbuilder_e[@h2];
			Ui[(cls w) => { cp[A(in(w, singleton(x)), in(z, w)) |-
				in_eq_right_1[Ae2[@h3]; singleton_e[@h1; Ae1[@h3]]]] }]
		]
}

schema self_to_bigcup_singleton(cls x: @11, cls z: @21) {
	set(x), in(z, x) |-
		setbuilder_i[
			set_i[@h2];
			Xi((cls w) => {A(in(w, singleton(x)), in(z, w))}, x)[Ai[
				self_in_singleton[@h1];
				@h2
			]]
		][as in(z, bigcup(singleton(x)))]
}

schema bigcup_singleton_is_self(cls x: @11) {
	set(x) |-
		eq_i(bigcup(singleton(x)), x)[Ui[(cls z) => {
			Eiu[
				in(z, bigcup(singleton(x))) |- bigcup_singleton_to_self(x, z)[@h1; @h2];
				in(z, x) |- self_to_bigcup_singleton[@h1; @h2]
			]
		}]]
}

schema bigcup_doubleton_to_cup(cls x: @11, cls y: @21, cls w: @31) {
	set(x), set(y), in(w, bigcup(doubleton(x, y))) |-
		mpX_Xe_p(
			(cls z) => {
				A(
					in(z, doubleton(x, y)),
					in(w, z)
				)
			},
			in(w, cup(x, y))
		)[
			setbuilder_e[@h3];
			Ui[(cls z) => {
				cp[A(in(z, doubleton(x, y)), in(w, z)) |-
					doubleton_to_cup[
						@h1; @h2;
						Ae1[@h4];
						Ae2[@h4]
					]]
			}]
		]
}

schema cup_to_bigcup_doubleton(cls x: @11, cls y: @21, cls w: @31) {
	set(x), set(y), in(w, cup(x, y)) |-
		setbuilder_i[
			set_i[@h3];
			Oe[
				cup_e[@h3];
				cp[
					in(w, x) |-
						Xi((cls z) => {
							A(
								in(z, doubleton(x, y)),
								in(w, z)
							)
						}, x)[
							Ai[
								doubleton_in_1(x, y)[@h1; @h2];
								in_eq_right_1[@h4; eq_reflexive(x)]
							]
						]
				];
				cp[
					in(w, y) |-
						Xi((cls z) => {
							A(
								in(z, doubleton(x, y)),
								in(w, z)
							)
						}, y)[
							Ai[
								doubleton_in_2(x, y)[@h1; @h2];
								in_eq_right_1[@h4; eq_reflexive(y)]
							]
						]
				]
			]
		][as in(w, bigcup(doubleton(x, y)))]
}

schema bigcup_doubleton_is_cup(cls x: @11, cls y: @21) {
	set(x), set(y) |-
		eq_i(
			bigcup(doubleton(x, y)),
			cup(x, y)
		)[
			Ui[(cls w) => {
				Ei[
					cp[in(w, bigcup(doubleton(x, y))) |- bigcup_doubleton_to_cup(x, y, w)[@h1; @h2; @h3]];
					cp[
						in(w, cup(x, y)) |-
							cup_to_bigcup_doubleton[
								@h1; @h2; @h3
							]
					]
				]
			}]
		]
}

schema cup_is_set(cls x: @11, cls y: @21) {
	set(x), set(y) |-
		set_is_set_1[
			ax_bigcup_m(doubleton(x, y))[
				doubleton_set_i[@h1; @h2]
			];
			bigcup_doubleton_is_cup[
				@h1; @h2
			]
		]
}

"power class."
$<<\mathcal P>>(#1)$
cls power(cls x) {
	setbuilder((cls z) => {
		subseteq(z, x)
	})
}

schema power_def_Ue(cls x, cls y) {
	set(x) |-
		Eiu[
			in(y, power(x)) |- setbuilder_e[@h2];
			subseteq(y, x) |-
				setbuilder_i[subset_is_set[@h1; @h2]; @h2]
				[as in(y, power(x))]
		]
}

"x가 집합일 때, x와 같은 것은 x의 power class에 속한다."
schema self_in_power(cls x, cls z) {
	set(x) |-
		cp[eq(z, x) |-
			mp[eq_to_subseteq_1[@h2]; Ee2[power_def_Ue(x, z)[@h1]]]]
}

schema singleton_subseteq_power(cls x: @11) {
	set(x) |-
		Ui[(cls y) => {
			cp[in(y, singleton(x)) |-
				mp[
					singleton_e[@h1; @h2];
					self_in_power(x, y)[@h1]
				]]
		}][as subseteq(singleton(x), power(x))]
}

"axiom of power set."
axiomatic schema ax_power() {
	U((cls x) => {
		I(
			set(x),
			X((cls y) => {
				A(
					set(y),
					U((cls z) => {
						I(subseteq(z, x), in(z, y))
					})
				)
			})
		)
	})
}

schema ax_power_m(cls x) {
	set(x) |- mp[@h1; Ue(?, x)[ax_power()]]
}

"멱집합은 집합이다."
schema power_is_set(cls x: @11) {
	set(x) |-
		Xe_p(set(power(x)))[mpX(?, (cls y) => {set(power(x))})[
			ax_power_m(x)[@h1];
			Ui[(cls y) => {
				cp[
					A(set(y), U((cls z) => {
						I(subseteq(z, x), in(z, y))
					})) |-
						subset_is_set[
							Ae1[@h2];
							Ui[(cls z) => {
								syll[
									setbuilder_ec((cls z) => {
										subseteq(z, x)
									}, z);
									Ue(?, z)[Ae2[@h2]]
								]
							}][as subseteq(power(x), y)]
						]
				]
			}]
		]]
}

"싱글턴은 집합이다."
schema singleton_set_i(cls x: @11) {
	set(x) |-
		subset_is_set[power_is_set[@h1]; singleton_subseteq_power(x)[@h1]]
}