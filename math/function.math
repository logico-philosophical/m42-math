import propositional;
import predicate;
import set;
import relation;

###########################
######## FUNCTIONS ########
###########################

"어떤 [$\langle f, A, B\rangle]가 함수이다.

[$f\subseteq A\times B]이고 임의의 [$x\in A]에 대해 [$.(x, y)\in f]를 만족하는 유일한 [$y]가 존재한다는 뜻이다."
$<<\mathop\mathrm{function}>>\left(#1: #2 \to #3\right)$
st is_fun(cls f, $A$ cls a, $B$ cls b) {
	A(
		subseteq(f, cartesian(a, b)),
		Uin(a, (cls x) => {
			A(
				Xin(b, (cls y) => {
					in(pair(x, y), f)
				}),
				Q((cls y) => {
					in(pair(x, y), f)
				})
			)
		})
	)
}

schema fun_subseteq_cartesian(cls f: @11, $A$ cls a: @12, $B$ cls b: @13) {
	is_fun(f, a, b) |- Ae1[@h1]
}

schema fun_in_e1(cls f: @11, $A$ cls a: @12, $B$ cls b: @13, cls x: @211, cls y: @212) {
	is_fun(f, a, b), in(pair(x, y), f) |-
		cartesian_in_e1[in_subseteq[@h2; fun_subseteq_cartesian[@h1]]]
}

schema fun_im_Xq(cls f: @11, $A$ cls a: @12, $B$ cls b: @13) {
	is_fun(f, a, b) |- Ae2[@h1]
}

schema fun_im_Xq_m(cls f: @11, $A$ cls a: @12, $B$ cls b: @13, cls x: @21) {
	is_fun(f, a, b), in(x, a) |-
		mp[@h2; Ue(?, x)[fun_im_Xq[@h1]]]
}

schema fun_im_X(cls f: @11, $A$ cls a: @12, $B$ cls b: @13) {
	is_fun(f, a, b) |-
		Ui[(cls x) => {
			cp[(
				in(x, a) |-
					Ae1[mp[@h2; Ue(?, x)[fun_im_Xq[@h1]]]]
			)]
		}]
		[as Uin(a, (cls x) => {Xin(b, (cls y) => {in(pair(x, y), f)})})]
}

schema fun_im_X_m(cls f: @11, $A$ cls a: @12, $B$ cls b: @13, cls x: @21) {
	is_fun(f, a, b), in(x, a) |-
		mp[@h2; Ue(?, x)[fun_im_X[@h1]]]
}

schema fun_im_Q(cls f: @11, $A$ cls a: @12, $B$ cls b: @13) {
	is_fun(f, a, b) |-
		Ui[(cls x) => {
			cp[(
				in(x, a) |-
					Ae2[mp[@h2; Ue(?, x)[fun_im_Xq[@h1]]]]
			)]
		}]
		[as Uin(a, (cls x) => {Q((cls y) => {in(pair(x, y), f)})})]
}

schema fun_im_Q_m(cls f: @11, $A$ cls a: @12, $B$ cls b: @13, cls x: @21, $y_1$ cls y1: @312, $y_2$ cls y2: @412) {
	is_fun(f, a, b), in(x, a), in(pair(x, y1), f), in(pair(x, y2), f) |-
		mp[Ai[@h3; @h4]; Ue2(?, y1, y2)[mp[@h2; Ue(?, x)[fun_im_Q[@h1]]]]]
}

schema fun_is_rel(cls f: @11, $A$ cls a: @12, $B$ cls b: @13) {
	is_fun(f, a, b) |- rel_subset_is_rel[
		fun_subseteq_cartesian(f, a, b)[@h1];
		cartesian_is_rel(a, b)
	]
}

schema fun_dom(cls f, $A$ cls a, $B$ cls b) {
	is_fun(f, a, b) |- eq(rel_dom(f), a)
}

"함수 호출. [$f]가 함수이고 [$x]가 [$f]의 정의역에 있을 경우 함숫값이 된다. 그러하지 아니할 때의 동작은 중요하지 않다."
$#1\mathord{\left(#2\right)}{}^{<<\scriptscriptstyle\dag>>}$
sealed cls funcall(cls f, cls x) {
	instantiate((cls y) => in(pair(x, y), f))
}

schema funcall_Xq(cls f: @11, $A$ cls a: @12, $B$ cls b: @13, cls x: @21) {
	is_fun(f, a, b), in(x, a) |-
		$foo = fun_im_Xq_m[@h1; @h2];
		
		Ai[Xin_to_X[Ae1[$foo]]; Ae2[$foo]]
		[as Xq((cls y) => in(pair(x, y), f))]
}

schema funcall_def(cls f: @11, $A$ cls a: @12, $B$ cls b: @13, cls x: @21) using funcall {
	is_fun(f, a, b), in(x, a) |-
		instantiate_def[funcall_Xq[@h1; @h2]]
		[as in(pair(x, funcall(f, x)), f)]
}

schema funcall_i(cls f: @11, $A$ cls a: @12, $B$ cls b: @13, cls x: @211, cls y: @212) {
	is_fun(f, a, b), in(pair(x, y), f) |-
		$x_in_a = cartesian_in_e1[in_subseteq[@h2; fun_subseteq_cartesian[@h1]]];
		
		fun_im_Q_m[
			@h1;
			$x_in_a;
			@h2;
			funcall_def[@h1; $x_in_a]
		]
}

schema funcall_e(cls f: @11, $A$ cls a: @12, $B$ cls b: @13, cls x: @21, cls y: @31) {
	is_fun(f, a, b), in(x, a), eq(y, funcall(f, x)) |-
		in_eq_left_2[
			funcall_def[@h1; @h2];
			pair_eq_i[
				eq_reflexive(x);
				@h3
			]
		]
}

schema fun_eq_i(cls f: @11, cls g: @21, $A$ cls a: @12, $B$ cls b: @13) {
	$bar = (cls f, cls g, $A$ cls a, $B$ cls b) => {
		is_fun(f, a, b), is_fun(g, a, b), Uin(a, (cls x) => {eq(funcall(f, x), funcall(g, x))}) |-
			$foo = Ui2[(cls x, cls y) => {
				cp[in(pair(x, y), f) |-
					$x_in_a = fun_in_e1[@h1; @h4];
					funcall_e[@h2; $x_in_a; eq_transitive[funcall_i[@h1; @h4]; mp[$x_in_a; Ue(?, x)[@h3]]]]]
			}];

			rel_U(is_in(g), ?)[fun_is_rel[@h1]; $foo]
			[as subseteq(f, g)]
	};
	
	is_fun(f, a, b), is_fun(g, a, b), Uin(a, (cls x) => {eq(funcall(f, x), funcall(g, x))}) |-
		subseteq_to_eq[
			$bar(f, g, a, b)[@h1; @h2; @h3];
			$bar(g, f, a, b)[@h2; @h1; Ui[(cls x) => { cp[in(x, a) |- eq_symmetric[mp[@h4; Ue(?, x)[@h3]]]] }]]
		]
}

schema funcall_eq_i(cls f, $x_1$ cls x1: @11, $x_2$ cls x2: @12) {
	eq(x1, x2) |-
		call_eq_i((cls x) => funcall(f, x), ?, ?)[@h1]
}

schema funcall_in_codomain(cls f: @11, $A$ cls a: @12, $B$ cls b: @13, cls x: @21) {
	is_fun(f, a, b), in(x, a) |-
		mpX_Xe_p(?, in(funcall(f, x), b))[
			fun_im_X_m[@h1; @h2];
			Ui[(cls y) => { cp[A(in(y, b), in(pair(x, y), f)) |-
				in_eq_left_1[Ae1[@h3]; fun_im_Q_m[@h1; @h2; Ae2[@h3]; funcall_def(f, a, b, x)[@h1; @h2]]]] }]
		]
}

"매개변수가 하나인 메타함수로 함수를 만든다."
$\left[#1\right]_{<<\in>>#2}$
cls make_fun(fun f, $A$ cls a) {
	setbuilder2(
		(cls z) => {
			pair(z, f(z))
		},
		(cls z) => {
			in(z, a)
		}
	)
}

schema make_fun_is_fun(fun f, $A$ cls a, $B$ cls b) {
	Uin(a, (cls x) => {
		in(f(x), b)
	}) |-
		$c1 = Ui[(cls w) => { cp[in(w, make_fun(f, a)) |-
			mpX_Xe_p(?, in(w, cartesian(a, b)))[
				setbuilder_e[@h2];
				Ui[(cls z) => { cp2[eq(w, pair(z, f(z))), in(z, a) |-
					in_eq_left_2[cartesian_in_i[@h4; mp[@h4; Ue(?, z)[@h1]]]; @h3]] }]
			]
		] }][as subseteq(make_fun(f, a), cartesian(a, b))];
		
		$c23 = Ui[(cls x) => { cp[in(x, a) |-
			$fx_in_b = mp[@h2; Ue(?, x)[@h1]];
			$c2 = Xi((cls y) => {
				A(in(y, b), in(pair(x, y), make_fun(f, a)))
			}, f(x))[
				Ai[
					$fx_in_b;
					setbuilder2_i(?, ?, x)[pair_set_i[set_i[@h2]; set_i[$fx_in_b]]; @h2]
					[as in(pair(x, f(x)), make_fun(f, a))]
				]
			];
			
			$c3 = Qim((cls y) => {in(pair(x, y), make_fun(f, a))}, f(x))[
				Ui[(cls y) => { cp[in(pair(x, y), make_fun(f, a)) |-
					mpX_Xe_p(?, eq(y, f(x)))[
						setbuilder_e[@h3];
						Ui[(cls z) => { cp[A(eq(pair(x, y), pair(z, f(z))), in(z, a)) |-
							$pair_eq = Ae1[@h4];

							ax_indiscernible_m2((cls z) => {eq(y, f(z))}, ?, ?)[
								pair_eq_e1_v1[set_i[@h3]; $pair_eq];
								pair_eq_e2_v1[set_i[@h3]; $pair_eq]
							]
						] }]
					]
				] }]
			];
			
			Ai[$c2; $c3]
		] }];
		
		Ai[$c1; $c23][as is_fun(make_fun(f, a), a, b)]
}

schema make_fun_funcall(fun f, $A$ cls a: @22, $B$ cls b, cls x: @21) {
	Uin(a, (cls x) => {in(f(x), b)}), in(x, a) |-
		eq_symmetric[funcall_i[
			make_fun_is_fun(f, a, b)[@h1];
			setbuilder2_i(?, ?, x)[
				pair_set_i[set_i[@h2]; set_i[mp[@h2; Ue(?, x)[@h1]]]];
				@h2
			][as in(pair(x, f(x)), make_fun(f, a))]
		]]
}

"매개변수가 두 개인 메타함수로 함수를 만든다."
$\left[#1\right]_{<<\in>>#2 \times #3}$
cls make_fun_pair([(cls, cls) -> cls] f, $A$ cls a, $B$ cls b) {
	setbuilder2_pair(
		(cls x, cls y) => {
			pair(pair(x, y), f(x, y))
		},
		(cls x, cls y) => {
			A(in(x, a), in(y, b))
		}
	)
}

"전사함수(surjective function). onto라고도 한다."
$<<\mathop\mathrm{surjection}>>\left(#1: #2 \to #3\right)$
st is_surjection(cls f, $A$ cls a, $B$ cls b) {
	A(
		is_fun(f, a, b),
		Uin(b, (cls y) => {
			Xin(a, (cls x) => {
				in(pair(x, y), f)
			})
		})
	)
}

"단사함수(injective function). 일대일함수(one-to-one function)라고도 한다."
$<<\mathop\mathrm{injection}>>\left(#1: #2 \to #3\right)$
st is_injection(cls f, $A$ cls a, $B$ cls b) {
	A(
		is_fun(f, a, b),
		Uin(b, (cls y) => {
			Q((cls x) => {
				in(pair(x, y), f)
			})
		})
	)
}

"전단사함수(bijective function). [~(href=#def-is_fun)is_fun]의 정의와의 유사성에 주목하라."
$<<\mathop\mathrm{bijection}>>\left(#1: #2 \to #3\right)$
st is_bijection(cls f, $A$ cls a, $B$ cls b) {
	A(
		is_fun(f, a, b),
		Uin(b, (cls y) => {
			A(
				Xin(a, (cls x) => {
					in(pair(x, y), f)
				}),
				Q((cls x) => {
					in(pair(x, y), f)
				})
			)
		})
	)
}

$<<\mathop\mathrm{invertible\ fun.}>>\left(#1: #2 \to #3\right)$
st is_invertible_fun(cls f, $A$ cls a, $B$ cls b) {
	A(
		is_fun(f, a, b),
		is_fun(rel_inverse(f), b, a)
	)
}

"Schr[&ouml]der[&ndash]Bernstein 정리."
schema schroeder_bernstein($A$ cls a, $B$ cls b) {
	X((cls f) => is_injection(f, a, b)), X((cls g) => is_injection(g, b, a)) |-
		X((cls h) => is_bijection(h, a, b))
}